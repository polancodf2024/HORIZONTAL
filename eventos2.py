import streamlit as st
from datetime import datetime
import pandas as pd

def setup_page():
    """Configura la p√°gina de Streamlit"""
    st.set_page_config(
        page_title="üö® Reporte Cardiol√≥gico de Eventos Adversos",
        layout="wide",
        page_icon="‚ù§Ô∏è"
    )
    st.title("‚ù§Ô∏è‚Äçü©π Reporte Estructurado de Eventos Adversos Cardiol√≥gicos")
    st.markdown("**Instituto de Cardiolog√≠a - Sistema estandarizado para UCIC, Hemodinamia y Cirug√≠a Cardiovascular**")

def show_event_context():
    """Muestra la secci√≥n de contexto del evento"""
    with st.expander("üìå Contexto del Evento", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            fecha_evento = st.date_input("üìÖ Fecha del evento", datetime.today())
            turno = st.radio("üïí Turno", [
                "Matutino (6:00-14:00)", 
                "Vespertino (14:00-22:00)", 
                "Nocturno (22:00-6:00)"
            ], horizontal=True)
        with col2:
            ubicacion = st.selectbox("üè• √Årea donde ocurri√≥", [
                "UCIC (Unidad Coronaria)", 
                "UCIN (Unidad Card√≠aca Intensiva Neonatal)", 
                "Hemodinamia", 
                "Quir√≥fano Cardiovascular", 
                "Hospitalizaci√≥n Cardiol√≥gica", 
                "Urgencias Cardiol√≥gicas"
            ])
            procedimiento_asociado = st.selectbox("ü©∫ Procedimiento relacionado (si aplica)", [
                "",
                "Cateterismo Cardiaco",
                "Angioplastia/Stent",
                "Ablaci√≥n",
                "Implante de Marcapasos/DAI",
                "Cirug√≠a de Bypass",
                "Valvuloplast√≠a",
                "ECMO",
                "Otro"
            ])
    return {
        "fecha_evento": fecha_evento,
        "turno": turno,
        "ubicacion": ubicacion,
        "procedimiento_asociado": procedimiento_asociado
    }

def show_event_classification():
    """Muestra la clasificaci√≥n del evento adverso"""
    with st.expander("‚ö†Ô∏è Clasificaci√≥n del Evento Adverso", expanded=True):
        categoria_principal = st.selectbox("üîç Tipo principal de evento", [
            "",
            "Complicaci√≥n Isqu√©mica",
            "Arritmia",  
            "Complicaci√≥n Hemodin√°mica",
            "Complicaci√≥n Vascular",
            "Evento Tromboemb√≥lico",  
            "Reacci√≥n a Medios de Contraste",
            "Infecci√≥n Asociada",
            "Falla de Equipo Cr√≠tico",
            "Error en Medicaci√≥n Cardiovascular"
        ])

        subcategorias_cardio = {
            "Complicaci√≥n Isqu√©mica": [
                "Reinfarto post-procedimiento",
                "Oclusi√≥n aguda de stent",
                "Espasmo coronario",
                "Disecci√≥n coronaria"
            ],
            # ... (otras subcategor√≠as como en el c√≥digo anterior)
        }

        subcategoria = ""
        if categoria_principal in subcategorias_cardio:
            subcategoria = st.selectbox("üìå Subcategor√≠a espec√≠fica", [""] + subcategorias_cardio[categoria_principal])

        col1, col2 = st.columns(2)
        with col1:
            escala_grace = st.radio("üìä Gravedad (Adaptado a ESC Guidelines)", [
                "Bajo riesgo (sin repercusi√≥n hemodin√°mica)",
                "Intermedio (requiri√≥ intervenci√≥n no planificada)",
                "Alto riesgo (da√±o org√°nico permanente)",
                "Cr√≠tico (muerte o ECMO requerido)"
            ])
        with col2:
            detectado_en = st.radio("üîé ¬øCu√°ndo se detect√≥?", [
                "Antes del procedimiento",
                "Durante el procedimiento",
                "Inmediatamente despu√©s",
                "Tard√≠amente (fuera de √°rea cr√≠tica)"
            ])
    
    return {
        "categoria_principal": categoria_principal,
        "subcategoria": subcategoria,
        "escala_grace": escala_grace,
        "detectado_en": detectado_en
    }

def show_contributing_factors():
    """Muestra los factores contribuyentes"""
    with st.expander("üîé Factores Contribuyentes", expanded=False):
        cols = st.columns(3)
        factores = {}
        with cols[0]:
            st.markdown("**Factores del Paciente**")
            factores["comorbilidad"] = st.checkbox("Comorbilidades complejas")
            factores["anatomia"] = st.checkbox("Anatom√≠a desfavorable")
            factores["urgencia"] = st.checkbox("Procedimiento urgente")
        
        with cols[1]:
            st.markdown("**Factores T√©cnicos**")
            factores["equipo"] = st.checkbox("Falla de equipo")
            factores["imagen"] = st.checkbox("Imagen intraprocedimiento no √≥ptima")
            factores["acceso"] = st.checkbox("Dificultad en acceso vascular")
        
        with cols[2]:
            st.markdown("**Factores Humanos**")
            factores["experiencia"] = st.checkbox("Experiencia insuficiente del operador")
            factores["comunicacion"] = st.checkbox("Comunicaci√≥n equipo-paciente")
            factores["fatiga"] = st.checkbox("Fatiga del personal")
    
    return factores

def show_patient_data():
    """Muestra los datos del paciente"""
    with st.expander("üë®‚Äç‚öïÔ∏è Datos del Paciente", expanded=False):
        cols = st.columns(3)
        paciente_data = {}
        with cols[0]:
            paciente_data["edad"] = st.selectbox("Edad", ["", "<40", "40-65", ">65"])
        with cols[1]:
            paciente_data["imc"] = st.selectbox("IMC", ["", "<25 (Normal)", "25-30 (Sobrepeso)", ">30 (Obeso)"])
        with cols[2]:
            paciente_data["riesgo_previo"] = st.selectbox("Riesgo pre-procedimiento", [
                "",
                "Bajo (0-2%)",
                "Intermedio (3-5%)",
                "Alto (>5%)"
            ])
    return paciente_data

def show_management_section():
    """Muestra la secci√≥n de manejo del evento"""
    with st.expander("üöë Manejo del Evento", expanded=False):
        cols = st.columns(2)
        manejo = {}
        with cols[0]:
            manejo["accion_inmediata"] = st.selectbox("‚úÖ Acci√≥n inmediata tomada", [
                "",
                "Reintervenci√≥n urgente",
                "Manejo m√©dico intensivo",
                "Soporte circulatorio mec√°nico",
                "Reversi√≥n farmacol√≥gica",
                "Traslado a UCIC/Quir√≥fano"
            ])
        with cols[1]:
            manejo["seguimiento"] = st.multiselect("üìã Seguimiento requerido", [
                "Monitorizaci√≥n extendida en UCIC",
                "Estudios de imagen adicionales",
                "Consulta a especialidad relacionada",
                "Revisi√≥n por comit√©"
            ])
    return manejo

def show_validation_section():
    """Muestra la secci√≥n de validaci√≥n"""
    with st.expander("‚úçÔ∏è Validaci√≥n del Reporte", expanded=False):
        cols = st.columns(2)
        validacion = {}
        with cols[0]:
            validacion["reporter_name"] = st.text_input("Nombre del profesional que reporta")
            validacion["reporter_role"] = st.selectbox("Rol", ["", "M√©dico", "Enfermer√≠a", "T√©cnico"])
        with cols[1]:
            validacion["supervisor_review"] = st.checkbox("Confirmo revisi√≥n con supervisor")
            validacion["fecha_reporte"] = datetime.now().strftime("%d/%m/%Y %H:%M")
    return validacion

def submit_report(context, classification, factors, patient, management, validation):
    """Procesa el env√≠o del reporte"""
    if not classification["categoria_principal"]:
        st.error("‚ùå Debe seleccionar al menos la categor√≠a principal del evento")
        return False
    
    if not validation["supervisor_review"]:
        st.error("‚ùå Requiere validaci√≥n con supervisor de turno")
        return False
    
    codigo_reporte = f"CARD-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    
    # Aqu√≠ ir√≠a la l√≥gica para guardar en base de datos
    report_data = {
        **context,
        **classification,
        "factores_contribuyentes": factors,
        "datos_paciente": patient,
        "manejo": management,
        "validacion": validation
    }
    
    st.success(f"‚úÖ Reporte enviado correctamente! C√≥digo: {codigo_reporte}")
    
    # Mostrar resumen
    with st.expander("üìÑ Resumen del Reporte", expanded=True):
        st.json(report_data)  # Alternativa: st.dataframe(pd.DataFrame.from_dict(report_data))
    
    return True

def show_supervisor_panel():
    """Muestra el panel de supervisores"""
    if st.secrets.get("SUPERVISOR_MODE", False):
        st.markdown("---")
        st.subheader("üìä Panel de An√°lisis Cardiol√≥gico (Solo Supervisores)")
        
        # Datos de ejemplo
        kpi_data = pd.DataFrame({
            "Tipo de Evento": ["Isqu√©mico", "Arritmia", "Vascular", "Tromboemb√≥lico"],
            "Casos (30d)": [12, 8, 5, 3],
            "Gravedad Promedio": [2.7, 3.1, 2.4, 3.8]
        })
        
        st.bar_chart(kpi_data, x="Tipo de Evento", y="Casos (30d)")

def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    # Configuraci√≥n inicial
    setup_page()
    
    # Mostrar secciones del formulario
    context = show_event_context()
    classification = show_event_classification()
    factors = show_contributing_factors()
    patient_data = show_patient_data()
    management = show_management_section()
    validation = show_validation_section()
    
    # Bot√≥n de env√≠o
    if st.button("üì§ Enviar Reporte Cardiol√≥gico", type="primary", use_container_width=True):
        submit_report(context, classification, factors, patient_data, management, validation)
    
    # Panel de supervisores
    show_supervisor_panel()

if __name__ == "__main__":
    main()
